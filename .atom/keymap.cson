# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.platform-darwin':
  'cmd-1': 'tree-view:toggle-focus'
  'cmd-n': 'tree-view:add-file'
  'cmd-shift-n': 'tree-view:add-folder'
  'cmd-shift-o': 'fuzzy-finder:toggle-file-finder'

'.platform-darwin atom-text-editor':
  'cmd-e': 'unset!'
  'cmd-r': 'unset!'

'atom-workspace':
  'cmd-r': 'find-and-replace:use-selection-as-find-pattern'
  'cmd-e': 'recent-files-fuzzy-finder:toggle-finder'

'atom-text-editor.vim-mode:not(.insert-mode)':
  'alt-cmd-j': 'multi-cursor:expandDown'
  'alt-cmd-k': 'multi-cursor:expandUp'
  'alt-cmd-l': 'core:select-right'
  'alt-cmd-h': 'core:select-left'
  'alt-cmd-u': 'multi-cursor:skipUp'
  'alt-cmd-d': 'multi-cursor:skipDown'
